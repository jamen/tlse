use std::os::raw::{c_float, c_long, c_uchar};

use winapi::ctypes::wchar_t;

use crate::{C2DVector, C3DVector};

#[repr(C)]
pub struct CInputEvent {
    pub data: UInputEventData,
    pub device_type: EInputDeviceType,
    pub device_number: c_long,
    pub typ: EInputEventType,
    pub current_time: c_float,
    pub start_time: c_float,
}

#[repr(C)]
pub union UInputEventData {
    pub key: EInputKey,
    pub mouse: CInputEventMouseData,
    pub joystick: CInputEventJoystickData,
    pub character: wchar_t,
}

#[derive(Debug, Copy, Clone)]
#[repr(C)]
pub struct CInputEventMouseData {
    pub held_movement: C3DVector,
    pub movement: C3DVector,
    pub pos: C2DVector,
}

#[derive(Debug, Copy, Clone)]
#[repr(C)]
pub struct CInputEventJoystickData {
    pub pos: C2DVector,
    pub button: c_uchar,
    pub button_pressure: c_float,
}

#[derive(Debug, Copy, Clone)]
#[repr(u32)]
pub enum EInputEventType {
    IE_NULL = 0x0000,
    IE_KEY_PRESSED = 0x0001,
    IE_KEY_HELD = 0x0002,
    IE_KEY_RELEASED = 0x0003,
    IE_LMB_PRESSED = 0x0004,
    IE_LMB_HELD = 0x0005,
    IE_LMB_RELEASED = 0x0006,
    IE_MMB_PRESSED = 0x0007,
    IE_MMB_HELD = 0x0008,
    IE_MMB_RELEASED = 0x0009,
    IE_RMB_PRESSED = 0x000a,
    IE_RMB_HELD = 0x000b,
    IE_RMB_RELEASED = 0x000c,
    IE_MOUSE_MOVEMENT = 0x000d,
    IE_MOUSE_WHEEL_MOVEMENT = 0x000e,
    IE_CHAR_PRESSED = 0x000f,
    IE_CHAR_RELEASED = 0x0010,
    IE_JOYSTICK_POSITION = 0x0011,
    IE_JOYSTICK_POSITION2 = 0x0012,
    IE_JOYSTICK_BUTTON_PRESSED = 0x0013,
    IE_JOYSTICK_BUTTON_HELD = 0x0014,
    IE_JOYSTICK_BUTTON_RELEASED = 0x0015,
    IE_MB4_PRESSED = 0x0016,
    IE_MB5_PRESSED = 0x0017,
    IE_MB6_PRESSED = 0x0018,
    IE_MB7_PRESSED = 0x0019,
    IE_MB8_PRESSED = 0x001a,
    IE_MB4_HELD = 0x001b,
    IE_MB5_HELD = 0x001c,
    IE_MB6_HELD = 0x001d,
    IE_MB7_HELD = 0x001e,
    IE_MB8_HELD = 0x001f,
    IE_MB4_RELEASED = 0x0020,
    IE_MB5_RELEASED = 0x0021,
    IE_MB6_RELEASED = 0x0022,
    IE_MB7_RELEASED = 0x0023,
    IE_MB8_RELEASED = 0x0024,
}

#[derive(Debug, Copy, Clone, PartialEq, Eq)]
#[repr(u32)]
pub enum EInputKey {
    KB_NULL = 0x0000,
    KB_ESC = 0x0001,
    KB_1 = 0x0002,
    KB_2 = 0x0003,
    KB_3 = 0x0004,
    KB_4 = 0x0005,
    KB_5 = 0x0006,
    KB_6 = 0x0007,
    KB_7 = 0x0008,
    KB_8 = 0x0009,
    KB_9 = 0x000a,
    KB_0 = 0x000b,
    KB_MINUS = 0x000c,
    KB_EQUALS = 0x000d,
    KB_BACKSPACE = 0x000e,
    KB_TAB = 0x000f,
    KB_Q = 0x0010,
    KB_W = 0x0011,
    KB_E = 0x0012,
    KB_R = 0x0013,
    KB_T = 0x0014,
    KB_Y = 0x0015,
    KB_U = 0x0016,
    KB_I = 0x0017,
    KB_O = 0x0018,
    KB_P = 0x0019,
    KB_LBRACKET = 0x001a,
    KB_RBRACKET = 0x001b,
    KB_RETURN = 0x001c,
    KB_LCONTROL = 0x001d,
    KB_A = 0x001e,
    KB_S = 0x001f,
    KB_D = 0x0020,
    KB_F = 0x0021,
    KB_G = 0x0022,
    KB_H = 0x0023,
    KB_J = 0x0024,
    KB_K = 0x0025,
    KB_L = 0x0026,
    KB_SEMICOLON = 0x0027,
    KB_APOSTROPHE = 0x0028,
    KB_HASH = 0x0029,
    KB_LSHIFT = 0x002a,
    KB_BACKSLASH = 0x002b,
    KB_Z = 0x002c,
    KB_X = 0x002d,
    KB_C = 0x002e,
    KB_V = 0x002f,
    KB_B = 0x0030,
    KB_N = 0x0031,
    KB_M = 0x0032,
    KB_COMMA = 0x0033,
    KB_FULLSTOP = 0x0034,
    KB_SLASH = 0x0035,
    KB_RSHIFT = 0x0036,
    KB_PMULTIPLY = 0x0037,
    KB_LALT = 0x0038,
    KB_SPACE = 0x0039,
    KB_CAPSLOCK = 0x003a,
    KB_F1 = 0x003b,
    KB_F2 = 0x003c,
    KB_F3 = 0x003d,
    KB_F4 = 0x003e,
    KB_F5 = 0x003f,
    KB_F6 = 0x0040,
    KB_F7 = 0x0041,
    KB_F8 = 0x0042,
    KB_F9 = 0x0043,
    KB_F10 = 0x0044,
    KB_NUMLOCK = 0x0045,
    KB_SCROLLLOCK = 0x0046,
    KB_P7 = 0x0047,
    KB_P8 = 0x0048,
    KB_P9 = 0x0049,
    KB_PMINUS = 0x004a,
    KB_P4 = 0x004b,
    KB_P5 = 0x004c,
    KB_P6 = 0x004d,
    KB_PPLUS = 0x004e,
    KB_P1 = 0x004f,
    KB_P2 = 0x0050,
    KB_P3 = 0x0051,
    KB_P0 = 0x0052,
    KB_PFULLSTOP = 0x0053,
    KB_F11 = 0x0054,
    KB_F12 = 0x0055,
    KB_F13 = 0x0056,
    KB_F14 = 0x0057,
    KB_F15 = 0x0058,
    KB_KANA = 0x0059,
    KB_CONVERT = 0x005a,
    KB_NOCONVERT = 0x005b,
    KB_YEN = 0x005c,
    KB_PEQUALS = 0x005d,
    KB_CIRCUMFLEX = 0x005e,
    KB_AT = 0x005f,
    KB_COLON = 0x0060,
    KB_UNDERLINE = 0x0061,
    KB_KANJI = 0x0062,
    KB_STOP = 0x0063,
    KB_AX = 0x0064,
    KB_UNLABELED = 0x0065,
    KB_PENTER = 0x0066,
    KB_RCONTROL = 0x0067,
    KB_PCOMMA = 0x0068,
    KB_PDIVIDE = 0x0069,
    KB_SYSRQ = 0x006a,
    KB_RALT = 0x006b,
    KB_HOME = 0x006c,
    KB_UP = 0x006d,
    KB_PAGEUP = 0x006e,
    KB_LEFT = 0x006f,
    KB_RIGHT = 0x0070,
    KB_END = 0x0071,
    KB_DOWN = 0x0072,
    KB_PAGEDOWN = 0x0073,
    KB_INSERT = 0x0074,
    KB_DELETE = 0x0075,
    KB_LWIN = 0x0076,
    KB_RWIN = 0x0077,
    KB_APPS = 0x0078,
    KB_PAUSE = 0x0079,
    NO_INPUT_KEYS = 0x007a,
}

#[derive(Debug, Copy, Clone)]
#[repr(u32)]
pub enum EInputDeviceType {
    INPUT_DEVICE_TYPE_NULL = 0x0000,
    INPUT_DEVICE_TYPE_JOYSTICK = 0x0001,
    INPUT_DEVICE_TYPE_KEYBOARD = 0x0002,
    INPUT_DEVICE_TYPE_MOUSE = 0x0003,
}
